#!/bin/bash

# Abort if anything fails. This will also stop the PHPCS at the first error
# instead of listing all errors.
# Uncomment to turn it on.
#set -e

# Check if the command exists.
TARGET_BRANCH="${1}"

if [ -z "$(command -v phpcs)" ]; then
  echo "PHPCS not found."
  exit 1
fi

if [ -z $TARGET_BRANCH ]; then
  echo "Please inform the target branch. E.g.:"
  echo "  ${0} origin/main"
  echo "  ${0} origin/development"
  echo "  ${0} origin/feature/branch"
  exit 1
fi

ROOT=$(git rev-parse --show-toplevel)

# List of files that were modified in the current branch against the target.
FILES=$(git diff --name-only "${TARGET_BRANCH}")

FILES_TOTAL=0
FILES_ISSUES=0
for FILE in $FILES; do
  case "${FILE}" in
    *.php | *.module | *.inc | *.install | *.test | *.profile | *.theme | *.js | *.css | *.scss | *.info | *.txt )
      # Run PHP_CodeSniffer.
      RESULT=$(phpcs --standard=Drupal,DrupalPractice --extensions=php,module,inc,install,test,profile,theme,js,css,scss,info,txt "${ROOT}/${FILE}")

      if [ ! -z "${RESULT}" ]; then
        echo
        echo "${FILE}"
        echo "${RESULT}"
        echo
        echo "----------=----------=----------=----------"
        ((FILES_ISSUES++))
      fi
      ;;
  esac
  ((FILES_TOTAL++))
done;

echo
echo "Parsing ${FILES_TOTAL} files... Found issues in ${FILES_ISSUES} files. "
